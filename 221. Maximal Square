/*
*当我们判断以每个点为最大的正方形时，那么它的上方，左方，左上方也一定是某个正方形的右下角，
*否则，该点为右下角的正方形最大的就是它自己。
*  如果这个店在原矩阵中本身就是0的话，那dp肯定是0
*dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
*/
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int result=0;
        if(matrix.empty())
            return result;
        const int n=matrix.size();//row
        const int m=matrix[0].size();//column
        /*初始值m=0和n=0,全部赋值为0*/
        vector<vector<int>> dp(n+1,vector<int>(m+1));
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++){
                if(matrix[i][j]=='1')
                {
                    dp[i+1][j+1]=min(dp[i][j],min(dp[i+1][j],dp[i][j+1]))+1;
                    result=max(result,dp[i+1][j+1])
                }
            }
        return result*result;
    }
};
